// update model

const process = require("process");
const path = require("path");
const chalk = require("chalk");
const fs = require("fs-extra");
const shelljs = require("shelljs");
const { string2Camel, stringFirstUpperCase, format, convertToCamelCase } = require("../kit");

async function update() {
  const modulesPath = path.join(process.cwd(), "src/modules");
  const modelsPath = path.join(process.cwd(), "src/state.ts");
  const frame = require(path.join(process.cwd(), "/package.json"))?.frame || "reaux-dom";

  const models = {};
  if (!fs.pathExistsSync(modulesPath)) {
    throw new Error(`no such file or directory:'${modulesPath}'`);
  }
  shelljs.ls(modulesPath).forEach((_) => {
    const moduleNames = shelljs.ls(path.join(modulesPath, _));
    if (moduleNames.includes("index.ts") || moduleNames.includes("index.tsx")) {
      models[_] = {
        importString: `import { State as ${convertToCamelCase(stringFirstUpperCase(_))}State } from 'src/modules/${_}/type';`,
        stateString: `${convertToCamelCase(_)}: ${convertToCamelCase(stringFirstUpperCase(_))}State;`,
      };
    } else {
      if (!fs.pathExistsSync(path.join(modulesPath, _))) {
        throw new Error(`no such file or directory:'${path.join(modulesPath, _)}'`);
      }
      shelljs.ls(path.join(modulesPath, _)).forEach((__) => {
        if (fs.statSync(path.join(modulesPath, _, __)).isDirectory()) {
          models[_ + "/" + __] = {
            importString: `import { State as ${convertToCamelCase(stringFirstUpperCase(_))}${convertToCamelCase(stringFirstUpperCase(__))}State } from 'src/modules/${_}/${__}/type';`,
            stateString: `${convertToCamelCase(string2Camel(`${_}/${__}`))}: ${convertToCamelCase(stringFirstUpperCase(_))}${convertToCamelCase(stringFirstUpperCase(__))}State;`,
          };
        }
      });
    }
  });

  let importString = ``;
  let stateArray = [];
  Object.values(models).forEach((item) => {
    importString += `${item.importString}\n`;
    stateArray.push(item.stateString);
  });
  const result = `
/*
    Attention: This file is generated by "reaux-cli", do not modify
*/
import { StateView } from "${frame}";

${importString}
export interface AllState extends StateView {
  ${stateArray.join("\n  ")}
}
  `;
  fs.ensureFileSync(modelsPath);
  fs.writeFileSync(modelsPath, result);

  format(modelsPath);

  console.info(chalk.green("Update state successfully"));
}

module.exports = {
  update,
};
